// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ChooseColorPage
    colorChanged={[MockFunction]}
    navigation={
      Object {
        "goBack": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Button
          color="#DE5448"
          onPress={[Function]}
          title="RED"
        />,
        <Button
          color="#17A05E"
          onPress={[Function]}
          title="GREEN"
        />,
        <Button
          color="#498AF4"
          onPress={[Function]}
          title="BLUE"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "RED",
        "nodeType": "class",
        "props": Object {
          "color": "#DE5448",
          "onPress": [Function],
          "title": "RED",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "GREEN",
        "nodeType": "class",
        "props": Object {
          "color": "#17A05E",
          "onPress": [Function],
          "title": "GREEN",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "BLUE",
        "nodeType": "class",
        "props": Object {
          "color": "#498AF4",
          "onPress": [Function],
          "title": "BLUE",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Button
            color="#DE5448"
            onPress={[Function]}
            title="RED"
          />,
          <Button
            color="#17A05E"
            onPress={[Function]}
            title="GREEN"
          />,
          <Button
            color="#498AF4"
            onPress={[Function]}
            title="BLUE"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "RED",
          "nodeType": "class",
          "props": Object {
            "color": "#DE5448",
            "onPress": [Function],
            "title": "RED",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "GREEN",
          "nodeType": "class",
          "props": Object {
            "color": "#17A05E",
            "onPress": [Function],
            "title": "GREEN",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "BLUE",
          "nodeType": "class",
          "props": Object {
            "color": "#498AF4",
            "onPress": [Function],
            "title": "BLUE",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
